instruction
# Инструкция для работы с Git и удаленными репозиториями

## Что такое Git?
Git - это одна из реализаций, распределенных сиситем контроля версий,
имеющая как локальные, так и удаленные репозитории. Является самой 
популярной реализацией сиситем контроля версий в мире.

## Подготовка репозитория
Для создания репозитория необходимо выполнить команду *git init*
в папке с репозиторием у Вас создастся репозиторий (появится 
скрытая папка .git)

## Создание коммитов
### Git add
Для добавления изменений в коммит используется комманда
*git add*. Чтобы использовать комманду *git add* напишите
*git add <имя файла>*.

### Просмотр состояния репозитория
Для того, чтобы посмотреть состояние репозитория
используется комманда *git status*. Для этого
необходимо в папке с репозиторием написать 
*git status*, и Вы увидите были ли изменения
в файлах, или их не было.

### Создание коммитов
Для того, чтобы создать коммит необходимо
выполнить коммманду *git commit*. Выполняется она 
так *git commit -am "пишем пометку"*.

### Просмотр журнала изменений
Чтобы увидеть количество сохранений, спользуйте
комманду *git log*.

### Создание ветки
Создать ветку можно командой *git branch*.
Выполняется она так: *git branch <название ветки>*
Чтобы просмотреть, на какой ветке мы находимся,
необходимо набрать *git branch*.

### Переключение между версиями (ветками)
Команда *git checkout* позволяет переключаться между
ветвями. Выполняется она так: *git checkout<название ветки*

### Слияние веток
Чтобы слить любую ветку с текущей, вызываем
*git merge <имя ветки для слияния с текущей>*

### Удаление веток
Чтобы удалить ветку , вызываем
*git branch -d <имя ветки для удаления>*

## Синтаксис языка Markdown
 Жирный текст — *
 Курсивный текст — *
 Зачеркнутый текст — ~
 Выделяют заголовки — # в начале строки
Показать уровень заголовка —
подчеркивание знаками = или ****
Нумерованные Списки — обозначаются
обычными цифрами *1, 2, 3*
 Ненумерованные Списки — обозначаются
*#* знаками в начале строки

## Как настроить совместную работу

1. Создать аккаунт на GitHub.com
2. Создать локальный репозиторий
3. “Подружить” ваш локальный и удалённый репозитории. 
4. Отправить (git push – отправляет локальную версию репозитория на внешний)
 ваш локальный репозиторий в удалённый (на GitHub), при этом, возможно,
вам нужно будет авторизоваться на удалённом репозитории
5. Провести изменения “с другого компьютера”
6. Выкачать (git pull – получение изменений и слияние с локальной версией)
 актуальное состояние из удалённого репозитория

git clone <url-адрес репозитория> – клонирование внешнего репозитория на
локальный ПК
